<?xml version="1.0"?>
<doc>
    <assembly>
        <name>3-BlockChainMenu</name>
    </assembly>
    <members>
        <member name="T:BlockChainMenu.Blocco">
            <summary>Classe che si occupa di gestire il singolo blocco della catena</summary>
        </member>
        <member name="P:BlockChainMenu.Blocco.Indice">
            <summary>
              <para>ID del blocco della catena</para>
            </summary>
        </member>
        <member name="P:BlockChainMenu.Blocco.DataOra">
            <summary>
              <para>
             Gets or sets the data ora di creazione del blocco con precisione fino a ms</para>
            </summary>
            <value>The data ora.</value>
        </member>
        <member name="P:BlockChainMenu.Blocco.HashPrecedente">
            <summary>Chiave di cifratura del blocco precedente. Gets or sets the hash precedente.</summary>
            <value>The hash precedente.</value>
        </member>
        <member name="P:BlockChainMenu.Blocco.HashBloccoCorrente">
            <summary>
              <para>
            chiave di cifratura del blocco precedente. Gets or sets the hash blocco corrente.
            </para>
            </summary>
            <value>The hash blocco corrente.</value>
        </member>
        <member name="P:BlockChainMenu.Blocco.Nonce">
            <summary>
            Assicura che i dati scambiati non possano alterati (cfr. Nonce Cryptography <a href="https://it.wikipedia.org/wiki/Nonce">https://it.wikipedia.org/wiki/Nonce</a> . Gets or sets the nonce.
            </summary>
            <value>The nonce.</value>
        </member>
        <member name="M:BlockChainMenu.Blocco.CalcolaHash">
            <summary>Calcola l'hash del blocco basandosi su SHA512</summary>
            <returns>Impronta digitale del blocco</returns>
        </member>
        <member name="T:BlockChainMenu.BlockChain">
            <summary>Classe che, per mezzo di una lista, si occupa di emulare il funzionamento della blockchain</summary>
        </member>
        <member name="P:BlockChainMenu.BlockChain.Utenti">
            <summary> Lista di utenti partecipanti alla blockchain.</summary>
        </member>
        <member name="F:BlockChainMenu.BlockChain.TransazioniInAttesa">
            <summary>gestisce le transazioni che devono ancora essere processate (minate)</summary>
        </member>
        <member name="P:BlockChainMenu.BlockChain.Difficoltà">
            <summary>Sistema per aumentare la complessità dei calcoli necessari per validare la blockchain all'aumentare della dimensione (Proof of Work)</summary>
            <value>The difficoltà.</value>
        </member>
        <member name="F:BlockChainMenu.BlockChain.Ricompensa">
            <summary>Con le transazioni si introduce il concetto di ricompensa, 1 moneta (UniMolCoin) per il lavoro svolto</summary>
        </member>
        <member name="M:BlockChainMenu.BlockChain.CreaBloccoIniziale">
            <summary>Nel caso in cui la catena fosse vuota, si occupa di generare un primo blocco</summary>
            <returns>Il primo blocco della blockchain</returns>
        </member>
        <member name="M:BlockChainMenu.BlockChain.AggiungiBlocco(BlockChainMenu.Blocco)">
            <summary>Si aggancia all'ultimo blocco disponibile e genera tutto il necessario per inserire in coda il blocco che si sta creando.</summary>
            <param name="blocco">Blocco della catena generato dal costruttore</param>
        </member>
        <member name="M:BlockChainMenu.BlockChain.IsValido">
            <summary>
            Scorre tutta la catena e ricalcola a runtime l'hash del blocco che sta analizzando in quel momento e lo confronta con quello del precedente.
            Nel caso in cui uno dei due fosse alterati (quindi mancata coincidenza degli hash) allora restituisce false e invalida la catena.
            </summary>
            <returns>Restituisce lo stato di validità di un blocco</returns>
        </member>
        <member name="M:BlockChainMenu.BlockChain.RicercaUtente(System.String)">
            <summary>
            Ricerca un utente all'interno della lista degli utenti.
            </summary>
            <param name="nome">Nome utente.</param>
            <returns>Oggetto di tipo utente</returns>
        </member>
        <member name="M:BlockChainMenu.BlockChain.VerificaUtente(System.String)">
            <summary>
            Verifica l'esistenza dell'utente all'interno della lista degli utenti.
            </summary>
            <param name="nome">Nome utente.</param>
            <returns>Utente esiste (true/false)</returns>
        </member>
        <member name="M:BlockChainMenu.BlockChain.GetUltimaTransazione">
            <summary>
            Ricerca l'ultima transazione.
            </summary>
            <returns>Oggetto di tipo transazione</returns>
        </member>
        <member name="M:BlockChainMenu.BlockChain.AggiornaSaldoUtenti">
            <summary>Aggiorna il portafogli di tutti gli utenti appartenenti alla blockchain</summary>
        </member>
        <member name="M:BlockChainMenu.BlockChain.MinaTransazioni(BlockChainMenu.Utente)">
            <summary>Genera un nuovo blocco e lo aggiunge alla catena al fine di validare una delle transazioni che devono essere ancora minate</summary>
            <param name="miner">Prende un oggetto di tipo utente (miner)</param>
        </member>
        <member name="M:BlockChainMenu.BlockChain.AggiornaBilancio">
            <summary>Restituisce il numero totale di coin in circolazione</summary>
            <returns>Num monete</returns>
        </member>
        <member name="T:BlockChainMenu.SmartContract">
            <summary>Questa classe implementa e gestisce lo SmartContract proveniente da un JSON</summary>
        </member>
        <member name="M:BlockChainMenu.SmartContract.Inizializza">
            <summary>
            Inizializza l'oggetto SmartContract a partire dal file JSON locale
            </summary>
        </member>
        <member name="M:BlockChainMenu.SmartContract.MostraContratto">
            <summary>
            Mostra i dati presenti all'interno del contratto: titolo, versione, data di ultima modifica e clausole
            </summary>
        </member>
        <member name="M:BlockChainMenu.SmartContract.ValidaTransazione(System.String,System.Int32)">
            <summary>
            Valida la transazione verificando se il saldo dell'utente è necessario a coprire l'importo che si vole spendere.
            </summary>
            <param name="nomeMittente">Nome di colui che vuole fare la transazione.</param>
            <param name="importoTransazione">Importo della transazione.</param>
            <returns>Il saldo è sufficiente (true/false)</returns>
        </member>
        <member name="M:BlockChainMenu.SmartContract.ValidaBlockchain">
            <summary>
            Verifica lo stato di validità dei blocchi presenti all'interno della blockchain.
            </summary>
            <returns>La blockchain è valida (true/false)</returns>
        </member>
        <member name="M:BlockChainMenu.SmartContract.AutenticaUtente(BlockChainMenu.Utente)">
            <summary>
            Assegna un ID univoco all'utente
            </summary>
            <param name="utente">Utente da autenticare.</param>
            <returns>ID univoco dell'utente (SHA)</returns>
        </member>
        <member name="T:BlockChainMenu.Transazione">
            <summary>Gestione della transazione associata ad un blocco della catena</summary>
        </member>
        <member name="P:BlockChainMenu.Transazione.IndirizzoMittente">
            <summary>Indirizzo di chi effettua (<em>fa partire</em>) la transazione</summary>
            <value>Indirizzo mittente.</value>
        </member>
        <member name="P:BlockChainMenu.Transazione.IndirizzoDestinatario">
            <summary>
              <para>Indirizzo del destinatario della transazione</para>
            </summary>
            <value>Indirizzo destinatario.</value>
        </member>
        <member name="P:BlockChainMenu.Transazione.Valore">
            <summary>Valore della transazione.</summary>
            <value>Valore.</value>
        </member>
    </members>
</doc>
